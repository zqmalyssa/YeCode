package com.qiming.algorithm;

/**
 * 剪绳子
 *
 * 给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n>1并且m>1），每段绳子的长度记为 k[0],k[1]...k[m] 。请问 k[0]*k[1]*...*k[m] 可能的最大乘积是多少？
 * 例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。
 *
 * 输入: 10 输出: 36  解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36
 *
 * 思路：贪心算法，按规律，分解成3是最好的，因为一个数是 整数部分 a（a = n / x） 和余数部分 bb （ b = n % x）。也就是说数字 n 由 a 个 x 和 1 个 b 相加而成。
 * 1、当 n <= 3 时，按照贪心规则应直接保留原数字，但由于题目要求必须拆分，因此必须拆出一个 1，即直接返回 n - 1；
 * 2、求 n 除以 3 的整数部分 a 和余数部分 b
 * 3、当 b == 0 时，直接返回 3^a
 * 4、当 b == 1时，要将一个 1 + 3转换为 2+2（因为大），此时返回 3^{a-1} * 4
 * 5、当 b == 2时，返回 3^a * b
 *
 *
 */
public class CuttingRopeI {

  public int integerBreak(int n) {
    if(n <= 3) return n - 1;
    int a = n / 3, b = n % 3;
    if(b == 0) return (int)Math.pow(3, a);
    if(b == 1) return (int)Math.pow(3, a - 1) * 4;
    return (int)Math.pow(3, a) * 2;
  }

}
